# Kubernetes Deployment configuration for the weather-predictor application
apiVersion: apps/v1
kind: Deployment

metadata:
  name: weather-predictor  # Unique name for the deployment
  labels:
    app: weather-predictor  # Label to identify and group the app

spec:
  replicas: 2  # Number of pods to run; adjust based on load and availability

  selector:
    matchLabels:
      app: weather-predictor  # Match pods with this label

  template:
    metadata:
      labels:
        app: weather-predictor  # Label assigned to pods created by this template

    spec:
      containers:
        - name: weather-predictor  # Container name
          image: your-dockerhub-username/weather-predictor:latest  # Use image from Docker Hub or private registry
          imagePullPolicy: Always  # Always pull the latest image (set to "IfNotPresent" for dev)

          ports:
            - name: http
              containerPort: 5000  # Flask app runs on port 5000

          env:
            - name: FLASK_ENV  # Environment variable for Flask
              value: "production"

            - name: APP_SECRET  # Example additional env variable
              valueFrom:
                secretKeyRef:
                  name: app-secrets  # Kubernetes secret object name
                  key: secret-key  # Key within the secret

          resources:
            requests:
              cpu: "100m"
              memory: "128Mi"
            limits:
              cpu: "500m"
              memory: "256Mi"

          livenessProbe:  # Optional: check if the app is alive
            httpGet:
              path: /health
              port: 5000
            initialDelaySeconds: 10
            periodSeconds: 15

          readinessProbe:  # Optional: check if the app is ready to serve traffic
            httpGet:
              path: /health
              port: 5000
            initialDelaySeconds: 5
            periodSeconds: 10
